#+TITLE: My Emacs settings
#+AUTHOR: Kumpei Shiraishi
#+EMAIL: kumpeishiraishi@gmail.com
#+DATE: 2019/03/27

This is my Emacs configurations.

* Packages
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
  (when (not package-archive-contents) (package-refresh-contents))
  (defvar myPackages
    '(ace-isearch
      avy
      csv-mode
      company
      company-irony
      elscreen
      exec-path-from-shell
      flycheck
      google-translate
      haskell-mode
      helm
      helm-ag
      helm-swoop
      helm-tramp
      irony
      json-mode
      markdown-mode
      migemo
      magit
      org
      org-ref
      rust-mode
      undo-tree
      use-package
      yatex))
  (dolist (package myPackages)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

I use use-package to configure packages.
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

* General settings
#+BEGIN_SRC emacs-lisp
(require 'cl)
(setq make-backup-files nil)
(fset 'yes-or-no-p 'y-or-n-p)
;; 言語環境・文字コード
(set-language-environment "Japanese")
(setenv "LANG" "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq coding-system-for-write 'utf-8)
;; EmacsとIMEの問題は、SKKで入力することにしたので、一応解決。Emacsでは常に英数入力という制御ができれば嬉しいが。（2017/01/06）
;; emacs-24.5-inline.patchを当ててHomebrewからインストールして可能になった、日本語関係の設定（起動時、ミニバッファ、isearch/migemoで英数）
;; (setq default-input-method "MacOSX")でIME毎カーソル色変更などは出来なかった（未解決2016/03/28）
;; 下記のIME関係は、インラインパッチをあてたEmacsの全画面表示時に、日本語入力が一文字しか出来ないという問題のため、棚上げ（2016/03/28）
;; (add-hook 'after-init-hook 'mac-change-language-to-us)
;; (add-hook 'minibuffer-setup-hook 'mac-change-language-to-us)
;; (add-hook 'isearch-mode-hook 'mac-change-language-to-us)

(exec-path-from-shell-initialize)
#+END_SRC

* Display
Do not show tool bar, scroll bar, etc.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq ring-bell-function 'ignore)
#+END_SRC

Display line numbers (not using linum-mode).
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC

Parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(if window-system
    (progn
      (set-frame-parameter nil 'fullscreen 'fullboth)
      (set-background-color "Black")
      (set-foreground-color "White")
      (set-cursor-color "Green")
      (set-frame-parameter nil 'alpha 80)))
;; 起動時画面
(setq inhibit-splash-screen t)
(setq initial-scratch-message nil)
(setq initial-major-mode 'org-mode)
(setq default-directory "~/Dropbox/")
;; scratch buffer消さない（元ネタ：https://github.com/uwabami/emacs）
(defun my:make-scratch (&optional arg)
  (interactive)
  (progn
    ;; "*scratch*" を作成して buffer-list に放り込む
    (set-buffer (get-buffer-create "*scratch*"))
    (funcall initial-major-mode)
    (erase-buffer)
    (when (and initial-scratch-message (not inhibit-startup-message))
      (insert initial-scratch-message))
    (or arg
        (progn
          (setq arg 0)
          (switch-to-buffer "*scratch*")))
    (cond ((= arg 0) (message "*scratch* is cleared up."))
          ((= arg 1) (message "another *scratch* is created")))))
(defun my:buffer-name-list ()
  (mapcar (function buffer-name) (buffer-list)))
(add-hook 'kill-buffer-query-functions
          ;; *scratch* バッファで kill-buffer したら内容を消去するだけにする
          (function (lambda ()
                      (if (string= "*scratch*" (buffer-name))
                          (progn (my:make-scratch 0) nil)
                        t))))
(add-hook 'after-save-hook
          ;; *scratch* バッファの内容を保存したら
          ;; *scratch* バッファを新しく作る.
          (function
           (lambda ()
             (unless (member "*scratch*" (my:buffer-name-list))
               (my:make-scratch 1)))))
;; 空白
;;(require 'whitespace)
;;(global-whitespace-mode 1)
#+END_SRC

** Fonts
Use [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]] for English.
To display Japanese letters in macOS, use Hiragino font.
In other systems, use [[https://github.com/adobe-fonts/source-han-sans][Source Han Sans]].
There is a option [[https://github.com/adobe-fonts/source-han-code-jp][Source Han Code JP]], which is a mixture of Source Code Pro and Source Han Sans, but I haven't tried it seriously yet.

TODO: ヒラギノとSource Code Proでキレイに文字幅1:2にしたい。上の安直な方法でヒラギノを1.25倍にすると、幅は良いがイビツになる。（2017/01/06）

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      :family "Source Code Pro"
                      :height 125)
  (if (equal system-type 'darwin)
      (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Hiragino Kaku Gothic ProN"))
    (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Source Han Sans")))
  (setq face-font-rescale-alist '(("Hiragino.*" . 1)))
#+END_SRC

* SKK
I use DDSKK for Japanese writing.
DDSKK is installed to my Dropbox directory, and some jisyo files are also in Dropbox.

** SKK Basics
#+BEGIN_SRC emacs-lisp
  (let ((default-directory (expand-file-name "~/Dropbox/Emacs/skk/skk/")))
    (add-to-list 'load-path default-directory)
    (if (fboundp 'normal-top-level-add-subdirs-to-load-path)
        (normal-top-level-add-subdirs-to-load-path)))

  (require 'skk-autoloads)
  (require 'skk-study)
  (global-set-key "\C-\\" 'skk-mode)
#+END_SRC

** SKK dictionaries
#+BEGIN_SRC emacs-lisp
  (setq skk-jisyo-code 'utf-8)
  (setq skk-isearch-start-mode 'utf-8);; migemoではSKK不要
  ;; (setq skk-user-directory "~/Dropbox/Emacs/skk") これでは以下のように、ファイル群を望んだフォルダ配下に保存できない（2016/05/02）
  (setq skk-jisyo "~/Dropbox/Emacs/skk/jisyo"
        skk-backup-jisyo "~/Dropbox/Emacs/skk/jisyo.bak"
        skk-record-file "~/Dropbox/Emacs/skk/record"
        skk-study-file "~/Dropbox/Emacs/skk/study"
        skk-study-backup-file "~/Dropbox/Emacs/skk/study.bak")
  (setq skk-large-jisyo "~/Dropbox/Emacs/skk/SKK-JISYO.L")
  (setq skk-extra-jisyo-file-list
        (list
         "~/Dropbox/Emacs/skk/SKK-JISYO.geo"
         "~/Dropbox/Emacs/skk/SKK-JISYO.jinmei"
         "~/Dropbox/Emacs/skk/SKK-JISYO.propernoun"
         "~/Dropbox/Emacs/skk/SKK-JISYO.station"
         "~/Dropbox/Emacs/skk/SKK-JISYO.itaiji"
         "~/Dropbox/Emacs/skk/SKK-JISYO.fullname"
         '("~/Dropbox/Emacs/skk/SKK-JISYO.JIS3_4" . euc-jisx0213)
         ))
  (setq skk-tut-file "~/Dropbox/Emacs/skk/skk/etc/SKK.tut")
#+END_SRC

** SKK displays
#+BEGIN_SRC emacs-lisp
  (setq skk-latin-mode-string "A"
        skk-hiragana-mode-string "あ"
        skk-katakana-mode-string "ア")
  (when skk-use-color-cursor
    (setq skk-cursor-default-color "Green"
          skk-cursor-hiragana-color "Magenta"
          skk-cursor-katakana-color "Cyan"
          skk-cursor-abbrev-color "Royalblue"
          skk-cursor-jisx0208-latin-color "Pink";; 全角英数
          skk-cursor-latin-color "Green"))
#+END_SRC

** SKK misc.
Automatically insert corresponding paren.
#+BEGIN_SRC emacs-lisp
(setq skk-auto-insert-paren t);; 対応する閉括弧挿入
#+END_SRC

Completion
#+BEGIN_SRC emacs-lisp
(setq skk-previous-candidate-key "x");; 前候補に戻るのはxだけ、C-pは使わない
(setq skk-dcomp-activate t);; 動的補完
;;      skk-dcomp-multiple-activate t
;;      skk-dcomp-multiple-rows 5);; 補完候補を複数表示させると表示が崩れるので、止め（2016/05/10）
(defadvice skk-j-mode-on (after skk-settings-for-dcomp activate)
  (define-key skk-j-mode-map "\C-n" 'skk-comp-wrapper)
  (define-key skk-j-mode-map "\C-p" 'skk-previous-comp-maybe))
(setq skk-show-annotation t)
#+END_SRC

Some characters must be displayed in full-width letters.
Also, I do not want to use TODAY function.
#+BEGIN_SRC emacs-lisp
(setq skk-rom-kana-rule-list
      (append skk-rom-kana-rule-list
              '(("！" nil "!")
                ("@" nil "@");;「トゥデイ」機能は使わない
                )))
#+END_SRC

* Modeline
#+BEGIN_SRC emacs-lisp
;; 各種表示/非表示
(line-number-mode -1);; 常に行番号を表示しているので、モードラインには不要
(setq display-time-day-and-date t)
;;(setq display-time-string-forms
;;      '((format "%s %s %s %s:%s:%s %s"
;;              dayname monthname day 12-hours minutes seconds am-pm
;;              )))
(display-time)
(display-battery-mode 1)
(set-face-foreground 'mode-line "blue1")
(set-face-background 'mode-line "gray90")
(setq-default mode-line-buffer-identification
              `(,(propertize "%b" 'face '(:foreground "maroon2"))))
;; モードを略号表示
(defvar mode-line-cleaner-alist
  '(
    (helm-mode . "")
    (helm-migemo-mode . "")
    (ace-isearch-mode . "")
    (flyspell-mode . "")
    (abbrev-mode . "")
    (company-mode . "")
    (irony-mode . "")
    (flycheck-mode . "")
    (real-auto-save-mode . "")
    (undo-tree-mode . "")
    (auto-revert-mode . "")
    ;; Major modes
    (lisp-interaction-mode . "Li")
    (python-mode . "Py")
    (haskell-mode . "Hs")
    (emacs-lisp-mode . "El")
    (yatex-mode . "TeX")
    (c++-mode . "C++")
    (c-mode . "C")
    (markdown-mode . "Md")))
(defun clean-mode-line ()
  (interactive)
  (loop for (mode . mode-str) in mode-line-cleaner-alist
        do
        (let ((old-mode-str (cdr (assq mode minor-mode-alist))))
          (when old-mode-str
            (setcar old-mode-str mode-str))
          ;; major mode
          (when (eq mode major-mode)
            (setq mode-name mode-str)))))
(add-hook 'after-change-major-mode-hook 'clean-mode-line)
#+END_SRC

* Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-u" 'undo)
(global-unset-key "\C-z")
(keyboard-translate ?\C-h ?\C-?)
(windmove-default-keybindings 'super);; 分割ウィンドウ移動をCMDで
(global-unset-key (kbd "M-ESC ESC"))
(global-unset-key (kbd "s-n"))
#+END_SRC

* JavaScript
#+BEGIN_SRC emacs-lisp
(use-package js
  :init
  (add-hook 'js-mode-hook
            (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)))
  )
#+END_SRC

* C++
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4
              tab-width 4
              indent-tabs-mode nil)
;; C++ style
(defun add-c++-mode-conf ()
  (c-set-style "stroustrup")
  (show-paren-mode t))
(add-hook 'c++-mode-hook 'add-c++-mode-conf)
#+END_SRC

* YaTeX
#+BEGIN_SRC emacs-lisp
(autoload 'yatex-mode "yatex" "Yet Another LaTeX mode" t)
(setq auto-mode-alist (cons (cons "\\.tex$" 'yatex-mode) auto-mode-alist))
(add-hook 'yatex-mode-hook '(lambda () (auto-fill-mode -1)));; 自動折り返し無効
(setq YaTeX-kanji-code nil);; 漢字コード指定せず
(setq dvi2-command "open -a Preview");; プレビュー
(setq tex-command "/Library/TeX/texbin/lualatex");; 通常はLuaLaTeX
;; 他の処理系を用いるには「%#!pdflatex」などと本文中に記載して、通常通りタイプセットすれば良い
(setq YaTeX-nervous nil);; ローカル辞書不要
(setq YaTeX-user-completion-table "~/dotfiles/.yatexrc");; ユーザ辞書もdotfilesで管理
(setq bibtex-command "biber")
;; skk対策
(add-hook 'skk-mode-hook
          (lambda ()
            (if (eq major-mode 'yatex-mode)
                (progn
                  (define-key skk-j-mode-map "\\" 'self-insert-command)
                  (define-key skk-j-mode-map "$" 'YaTeX-insert-dollar)
                  ))
            ))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (setq markdown-command "pandoc --standalone --self-contained --highlight-style=pygments -t html5 --css=/Users/kumpeishiraishi/dotfiles/.pandoc/github.css --mathjax=/Users/kumpeishiraishi/dotfiles/.pandoc/dynoload.js")
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; org-mode
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
;; orgキーバインド
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cr" 'org-remember)
;; org表示
(add-hook 'org-mode-hook 'turn-on-font-lock)
(setq org-hide-leading-stars t);; 見出しの*は最小限に
(setq org-startup-truncated nil);; 画面端で改行
;; org note
;; org-default-notes-fileのディレクトリ
(setq org-directory "~/Dropbox/Emacs/org/")
;; org-default-notes-fileのファイル名
(setq org-default-notes-file "notes.org")
;; TODO状態
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)")))
;; DONE時刻記録
(setq org-log-done 'time)
;; アジェンダ表示の対象ファイル
(setq org-agenda-files (list org-directory))
;; アジェンダ表示で下線を用いる
(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
(setq hl-line-face 'underline)
;; org ref
(require 'org-ref)
#+END_SRC

* Spell check
#+BEGIN_SRC emacs-lisp
(setq-default ispell-program-name "aspell")
(eval-after-load "ispell" '(add-to-list 'ispell-skip-region-alist '("[^\000-\377]+")));; 日本語混じりでも有効に
(global-set-key [s-return] 'ispell-word)
;; flyspell
(mapc
 (lambda (hook)
   (add-hook hook
             '(lambda () (flyspell-mode 1))))
 '(yatex-mode-hook
   markdown-mode-hook
   org-mode-hook))
#+END_SRC

* migemo
#+BEGIN_SRC emacs-lisp
(require 'migemo)
(setq migemo-command "cmigemo")
(setq migemo-options '("-q" "--emacs"))
(setq migemo-dictionary "/usr/local/share/migemo/utf-8/migemo-dict")
(setq migemo-user-dictionary nil)
(setq migemo-regex-dictionary nil)
(setq migemo-coding-system 'utf-8-unix)
(load-library "migemo")
(migemo-init)

(require 'tramp)
(setq tramp-default-method "ssh")
#+END_SRC

* helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
(define-key global-map (kbd "C-x C-f") 'helm-find-files)
(define-key global-map (kbd "M-x") 'helm-M-x)
(define-key helm-read-file-map (kbd "<tab>") 'helm-execute-persistent-action)
(define-key helm-find-files-map (kbd "<tab>") 'helm-execute-persistent-action)
(helm-migemo-mode 1)
(define-key global-map (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
;; 検索
(require 'helm-swoop)
(global-ace-isearch-mode 1)
(setq ace-isearch-function 'avy-goto-char)
;; helm-find-files
;; 元ネタhttps://www.reddit.com/r/emacs/comments/3f55nm/how_to_remove_2_first_dot_files_from_helmfindfiles/
(advice-add 'helm-ff-filter-candidate-one-by-one
        :around (lambda (fcn file)
                  (unless (string-match ".DS_Store" file)
                    (funcall fcn file))))
;; helm-ag
(global-set-key (kbd "M-g .") 'helm-ag)
(global-set-key (kbd "C-M-s") 'helm-ag-this-file)
#+END_SRC

* company
#+BEGIN_SRC emacs-lisp
(global-company-mode) ; 全バッファで有効にする 
(setq company-idle-delay 0) ; デフォルトは0.5
(setq company-minimum-prefix-length 2) ; デフォルトは4
(setq company-selection-wrap-around t) ; 候補の一番下でさらに下に行こうとすると一番上に戻る
(define-key company-active-map (kbd "M-n") nil)
(define-key company-active-map (kbd "M-p") nil)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-h") nil)

(require 'irony)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
(add-to-list 'company-backends 'company-irony) ; backend追加
(eval-after-load "irony"
  '(progn
     (custom-set-variables '(irony-additional-clang-options '("-std=c++11")))
     (add-to-list 'company-backends 'company-irony)
     (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
     (add-hook 'c-mode-common-hook 'irony-mode)))
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-flycheck-mode)
(global-set-key "\M-n" 'flycheck-next-error)
(global-set-key "\M-p" 'flycheck-previous-error)
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++14")))
#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
(setq delete-by-moving-to-trash t
      trash-directory "~/.Trash")
(setq dired-recursive-copies 'always
      dired-recursive-deletes 'always)
(setq dired-isearch-filenames t)
(setq dired-dwim-target t);; diredを2画面で開いていれば、片方でコピー/移動先を表示
(setq dired-listing-switches (purecopy "-alh"));; lsオプション
(define-key dired-mode-map (kbd "h") nil);; dired help不要
(eval-after-load "dired" '(progn
                            (define-key dired-mode-map (kbd "r") 'wdired-change-to-wdired-mode)))
#+END_SRC

* undo-tree
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode t)
(global-set-key (kbd "M-/") 'undo-tree-redo)
#+END_SRC

* google-translate
Thanks to [[http://emacs.rubikitch.com/google-translate/][rubikitch]].
#+BEGIN_SRC emacs-lisp
(require 'google-translate)
(defvar google-translate-english-chars "[:ascii:]’“”–"
  "これらの文字が含まれているときは英語とみなす")
(defun google-translate-enja-or-jaen (&optional string)
  "regionか、現在のセンテンスを言語自動判別でGoogle翻訳する。"
  (interactive)
  (setq string
        (cond ((stringp string) string)
              (current-prefix-arg
               (read-string "Google Translate: "))
              ((use-region-p)
               (buffer-substring (region-beginning) (region-end)))
              (t
               (save-excursion
                 (let (s)
                   (forward-char 1)
                   (backward-sentence)
                   (setq s (point))
                   (forward-sentence)
                   (buffer-substring s (point)))))))
  (let* ((asciip (string-match
                  (format "\\`[%s]+\\'" google-translate-english-chars)
                  string)))
    (run-at-time 0.1 nil 'deactivate-mark)
    (google-translate-translate
     (if asciip "en" "ja")
     (if asciip "ja" "en")
     string)))
(global-set-key (kbd "C-x t") 'google-translate-enja-or-jaen)
#+END_SRC

* Mail
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "kumpeishiraishi@gmail.com"
      user-full-name "Kumpei Shiraishi")
(setq gnus-select-method
      '(nnimap "gmail"
               (nnimap-address "imap.gmail.com")
               (nnimap-server-port "imaps")
               (nnimap-stream ssl)))
(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
#+END_SRC

* elscreen
#+BEGIN_SRC emacs-lisp
(elscreen-start)
(setq elscreen-prefix-key "\C-z");; prefix key
(setq elscreen-tab-display-kill-screen nil);; [X]を表示しない
(setq elscreen-tab-display-control nil);; [<->]を表示しない
(setq elscreen-display-tab nil);; タブ表示しない
#+END_SRC

* eshell
#+BEGIN_SRC emacs-lisp
;; 補完時に大文字小文字を区別しない
(setq eshell-cmpl-ignore-case t)
;; prompt文字列の変更
(setq eshell-prompt-function
      (lambda ()
        (concat "[kumpeishiraishi "
                (eshell/pwd)
                (if (= (user-uid) 0) "]\n# " "]\n$ ")
                )))
;; eshell alias
(setq eshell-command-aliases-list
      (append
       (list
        (list "la" "ls -a")
        (list "ll" "ls -l")
        (list "pandoc_gh" "pandoc --standalone --self-contained --highlight-style=pygments -t html5 --css=/Users/kumpeishiraishi/dotfiles/.pandoc/github.css")
        (list "pandoc_ghm" "pandoc --standalone --self-contained --highlight-style=pygments -t html5 --css=/Users/kumpeishiraishi/dotfiles/.pandoc/github.css --mathjax=/Users/kumpeishiraishi/dotfiles/.pandoc/dynoload.js"))
       eshell-command-aliases-list))
(use-package helm-eshell
  :init
  (add-hook 'eshell-mode-hook
        #'(lambda ()
        (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)))
  (add-hook 'eshell-mode-hook
        #'(lambda ()
                (define-key eshell-mode-map (kbd "M-p") 'helm-eshell-history))))
#+END_SRC

* eww
#+BEGIN_SRC emacs-lisp
(setq eww-search-prefix "http://www.google.com/search?q=")
;; 背景色を白くしない
;; 元ネタ：http://futurismo.biz/archives/2950
(defvar eww-disable-colorize t)
(defun shr-colorize-region--disable (orig start end fg &optional bg &rest _)
  (unless eww-disable-colorize
    (funcall orig start end fg)))
(advice-add 'shr-colorize-region :around 'shr-colorize-region--disable)
(advice-add 'eww-colorize-region :around 'shr-colorize-region--disable)
(defun eww-disable-color ()
  "eww で文字色を反映させない"
  (interactive)
  (setq-local eww-disable-colorize t)
  (eww-reload))
(defun eww-enable-color ()
  "eww で文字色を反映させる"
  (interactive)
  (setq-local eww-disable-colorize nil)
  (eww-reload))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
(require 'magit)
#+END_SRC

* ivy
#+BEGIN_SRC emacs-lisp
;;(ivy-mode 1) ;; デフォルトの入力補完がivyになる
;;(counsel-mode 1)
;;
;;(global-set-key "\C-s" 'swiper)
;;(global-set-key (kbd "C-c C-r") 'ivy-resume)
;;(global-set-key (kbd "<f6>") 'ivy-resume)
;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;(global-set-key (kbd "C-c g") 'counsel-git)
;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
;;(global-set-key (kbd "C-c k") 'counsel-ag)
;;(global-set-key (kbd "C-x l") 'counsel-locate)
;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
#+END_SRC

* misc
Sometimes, we lose our road, forget what we want to be, and become jerks.
Quotes from giants help us to come back from the situation.
I owe this code to [[http://futurismo.biz/archives/5938][this page]].
#+BEGIN_SRC emacs-lisp
(setq cookie-file "~/Dropbox/Emacs/policy.txt")
(global-set-key (kbd "C-x C-,") 'cookie)
#+END_SRC
